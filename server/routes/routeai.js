const express = require('express');
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const router = express.Router();
const mongo = require('mongoose')
const User = require('../models/User')
const ApiKey = require('../models/ApiKey')

router.post('/ai', async (req, res) => {
    try {
        const inputData = req.body;
        const { uid } = req.query;

        // Validate UID
        if (!uid) {
            return res.status(400).json({ error: 'Missing uid in query params' });
        }

        // Get token from DB
        const tokenDoc = await ApiKey.findOne({ userId: uid });
        inputData.token = tokenDoc && tokenDoc.token ? tokenDoc.token : false;

        console.log("Final input data sent to Python:", inputData);

        // Validate request body
        if (!inputData || typeof inputData !== 'object') {
            return res.status(400).json({ error: 'Invalid or missing request body' });
        }
        if (!inputData.char || !inputData.user) {
            return res.status(400).json({ error: 'Missing required fields: char and user' });
        }

        const pythonScriptPath = path.resolve(__dirname, '../python/hina.py');
        if (!fs.existsSync(pythonScriptPath)) {
            return res.status(500).json({ error: `Python script not found at ${pythonScriptPath}` });
        }

        const py = spawn('python3', [pythonScriptPath]);
        let errorOutput = '';
        let modelTries = [];
        let successfulModel = null;
        let failedModels = [];

        // Set headers for streaming
        res.setHeader('Content-Type', 'text/event-stream');
        res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Connection', 'keep-alive');

        // Stream stdout to response and parse for model info
        py.stdout.on('data', (data) => {
            const output = data.toString();
            res.write(data); // Stream to client

            // Parse for model tries and success
            if (output.includes('Trying model:')) {
                const model = output.split('Trying model: ')[1]?.split('\n')[0]?.trim();
                if (model) {
                    modelTries.push(model);
                    console.log(`Model tried: ${model}`);
                }
            }
            if (output.includes('Model') && output.includes('selected for response')) {
                const model = output.split('Model ')[1]?.split(' selected for response')[0]?.trim();
                if (model) {
                    successfulModel = model;
                    console.log(`Successful model: ${successfulModel}`);
                }
            }
            if (output.includes('Summary model selected:')) {
                const model = output.split('Summary model selected: ')[1]?.split('\n')[0]?.trim();
                if (model) {
                    modelTries.push(model);
                    console.log(`Summary model tried: ${model}`);
                }
            }
        });

        py.stderr.on('data', (data) => {
            errorOutput += data.toString();
            console.error(`Python stderr: ${data}`);
            // Parse stderr for failed model attempts
            if (data.toString().includes('Model') && data.toString().includes('failed')) {
                const model = data.toString().split('Model ')[1]?.split(' failed')[0]?.trim();
                if (model && !failedModels.includes(model)) {
                    failedModels.push(model);
                    console.log(`Model failed: ${model}`);
                }
            }
        });

        py.on('close', (code) => {
            if (code !== 0) {
                res.write(`event: error\ndata: ${JSON.stringify({ error: `Python exited with code ${code}`, details: errorOutput })}\n\n`);
            }
            // Summarize model attempts
            console.log(`Model try summary: ${modelTries.length} models tried (${modelTries.join(', ')})`);
            console.log(`Failed models: ${failedModels.length} (${failedModels.join(', ') || 'none'})`);
            if (successfulModel) {
                console.log(`Response generated by: ${successfulModel}`);
            } else {
                console.log('No model succeeded in generating a response');
            }
            res.end();
        });

        // Send data to Python
        py.stdin.write(JSON.stringify(inputData) + '\n');
        py.stdin.end();

    } catch (err) {
        console.error("Unexpected error:", err);
        res.status(500).json({ error: 'Server error', details: err.message });
    }
});

module.exports = router;